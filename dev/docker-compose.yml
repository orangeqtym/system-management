version: '3.8'

# This file defines the services for the DEVELOPMENT environment.
# Services are isolated by the 'dev_network'.
# Service discovery is handled by Docker DNS (e.g., http://email-service:3000).

networks:
  dev_network:
    driver: bridge
    name: dev_network

services:
  # --- Service Definitions ---
  email-service:
    image: ghcr.io/orangeqtym/email-service:dev
    restart: always
    networks:
      - dev_network
    env_file:
      - .env.dev
    ports:
      - "4000:3000" # Dev environment uses 4xxx ports

  meal-planner-api:
    image: ghcr.io/orangeqtym/meal-planner-api:dev
    restart: always
    networks:
      - dev_network
    env_file:
      - .env.dev
    environment:
      # Database Configuration
      DB_HOST: ${MEAL_PLANNER_DB_HOST}
      DB_PORT: ${MEAL_PLANNER_DB_PORT}
      DB_NAME: ${MEAL_PLANNER_DB_NAME}
      DB_USER: ${MEAL_PLANNER_DB_USER}
      DB_PASSWORD: ${MEAL_PLANNER_DB_PASSWORD}

      # API Configuration
      PORT: ${MEAL_PLANNER_PORT}
      NODE_ENV: development
      CORS_ORIGIN: ${MEAL_PLANNER_CORS_ORIGIN}
      LOG_LEVEL: ${MEAL_PLANNER_LOG_LEVEL}
    ports:
      - "4001:3001"
    depends_on:
      - database
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  database:
    image: postgres:15
    restart: always
    networks:
      - dev_network
    env_file:
      - .env.dev
    environment:
      POSTGRES_DB: system_db
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data

  api-service:
    image: nginx:alpine
    restart: always
    networks:
      - dev_network
    ports:
      - "4003:80"
    depends_on:
      - database

  webapp:
    image: nginx:alpine
    restart: always
    networks:
      - dev_network
    ports:
      - "4004:80"

volumes:
  db_data:
