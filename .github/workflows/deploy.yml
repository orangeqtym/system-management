name: Deploy Application

on:
  repository_dispatch:
    types: [deploy-app]

jobs:
  deploy:
    runs-on: self-hosted # This must run on your local machine
    steps:
      - name: Checkout system-management repository
        uses: actions/checkout@v3

      - name: Parse Dispatch Payload
        id: payload
        run: |
          echo "service=${{ github.event.client_payload.service }}" >> $GITHUB_OUTPUT
          echo "tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT
          echo "environment=${{ github.event.client_payload.environment }}" >> $GITHUB_OUTPUT

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Execute Deployment Script
        run: |
          SERVICE="${{ steps.payload.outputs.service }}"
          ENVIRONMENT="${{ steps.payload.outputs.environment }}"
          TAG="${{ steps.payload.outputs.tag }}"

          case "$SERVICE" in
            "email-service")
              bash scripts/deploy.sh "$ENVIRONMENT" "$SERVICE" "$TAG"
              ;;
            "meal-planner-api")
              bash scripts/deploy.sh "$ENVIRONMENT" "$SERVICE" "$TAG"
              ;;
            *)
              echo "Unknown service: $SERVICE"
              exit 1
              ;;
          esac

          # Deploy new services
          cd "${ENVIRONMENT}"

          # Copy .env file from main system-management directory (since runner is self-hosted)
          if [ ! -f ".env.${ENVIRONMENT}" ] && [ -f "/home/qtym/system-management/${ENVIRONMENT}/.env.${ENVIRONMENT}" ]; then
            echo "Copying .env.${ENVIRONMENT} from main directory..."
            cp "/home/qtym/system-management/${ENVIRONMENT}/.env.${ENVIRONMENT}" ".env.${ENVIRONMENT}"
          fi

          echo "Starting services..."
          docker compose up -d database
          docker compose up -d api-service
          docker compose up -d webapp

          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 15

          # Test deployment
          echo "Testing deployment..."
          docker compose ps

          # Test endpoints
          if curl -f http://localhost:6003 > /dev/null 2>&1; then
            echo "✅ API service responding on port 6003"
          else
            echo "❌ API service not responding"
          fi

          if curl -f http://localhost:6004 > /dev/null 2>&1; then
            echo "✅ Webapp service responding on port 6004"
          else
            echo "❌ Webapp service not responding"
          fi

          echo "🎉 Deployment completed successfully!"
